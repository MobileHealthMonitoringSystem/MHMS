###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.51.2.50607/W32 for MSP430       26/Apr/2013  14:00:12 #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\Source\zap_phy.c                   #
#    Command line  =  -f C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2. #
#                     5.1\Projects\zstack\ZAP\TVSA\EXP5438\..\..\Source\zap.c #
#                     fg (-DTVSA_DEVICE_ID=0x0016 -DTVSA_DONGLE=1             #
#                     -DHAL_UART=1 -DZAP_PHY_SPI=1                            #
#                     -DZAP_PHY_UART=!ZAP_PHY_SPI -DZAP_PHY_RESET_ZNP=TRUE    #
#                     -DZAP_ZNP_MT=FALSE -DZAP_APP_MSG=FALSE                  #
#                     -DZAP_SBL_PROXY=FALSE -DZAP_AUTO_CFG=TRUE               #
#                     -DZAP_AUTO_START=TRUE -DZAP_NV_RESTORE=FALSE            #
#                     -DLCD_SUPPORTED -DZAP_AF_DATA_REQ_FRAG=FALSE            #
#                     -DZAP_AF_DATA_REQ_AREQ=!ZAP_AF_DATA_REQ_FRAG            #
#                     -DZAP_ZDO_STARTUP_AREQ=TRUE -DZAP_AF_FUNC               #
#                     -DZAP_SAPI_FUNC -DZAP_SYS_FUNC -DZAP_UTIL_FUNC          #
#                     -DZAP_ZDO_FUNC -DSECURE=0 -DZG_SECURE_DYNAMIC=0         #
#                     "-DDEFAULT_CHANLIST=(uint32)0x00000800"                 #
#                     -DZDAPP_CONFIG_PAN_ID=0xFFFF -DPOLL_RATE=1000           #
#                     -DNWK_START_DELAY=100 -DMAX_BINDING_CLUSTER_IDS=4)      #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\Source\zap_phy.c -lC               #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\Routinator\List\ -lA  #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\Routinator\List\      #
#                     --remarks --diag_suppress Pe001,Pe193,Pe236,Pe826 -o    #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\Routinator\Obj\       #
#                     --debug -D__MSP430F5438A__ -e --double=32 --clib -I     #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\ -I                   #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\Source\ -I         #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\Source\ -I      #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\hal\target\MSP5438ZAP\ -I                          #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\hal\include\ -I C:\Users\student\Documents\GitHub\ #
#                     MHMS\ZAP-MSP430-2.5.1\Projects\zstack\ZAP\TVSA\EXP5438\ #
#                     ..\..\..\..\..\Components\mac\include\ -I               #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\mt\ -I C:\Users\student\Documents\GitHub\MHMS\ZAP- #
#                     MSP430-2.5.1\Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\ #
#                     ..\..\Components\osal\include\ -I                       #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\osal\mcu\msp430\ -I C:\Users\student\Documents\Git #
#                     Hub\MHMS\ZAP-MSP430-2.5.1\Projects\zstack\ZAP\TVSA\EXP5 #
#                     438\..\..\..\..\..\Components\services\saddr\ -I        #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\services\sdata\ -I C:\Users\student\Documents\GitH #
#                     ub\MHMS\ZAP-MSP430-2.5.1\Projects\zstack\ZAP\TVSA\EXP54 #
#                     38\..\..\..\..\..\Components\stack\af\ -I               #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\stack\nwk\ -I C:\Users\student\Documents\GitHub\MH #
#                     MS\ZAP-MSP430-2.5.1\Projects\zstack\ZAP\TVSA\EXP5438\.. #
#                     \..\..\..\..\Components\stack\sapi\ -I                  #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\stack\sec\ -I C:\Users\student\Documents\GitHub\MH #
#                     MS\ZAP-MSP430-2.5.1\Projects\zstack\ZAP\TVSA\EXP5438\.. #
#                     \..\..\..\..\Components\stack\sys\ -I                   #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\stack\zdo\ -I C:\Users\student\Documents\GitHub\MH #
#                     MS\ZAP-MSP430-2.5.1\Projects\zstack\ZAP\TVSA\EXP5438\.. #
#                     \..\..\..\..\Components\zmac\ -I                        #
#                     C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\..\..\..\..\..\Compon #
#                     ents\zmac\f8w\ --core=430X --data_model=small -Ohz      #
#                     --multiplier=32 --multiplier_location=4C0               #
#                     --require_prototypes --hw_workaround=CPU40              #
#                     --hw_workaround=CPU42                                   #
#    List file     =  C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\Routinator\List\zap_p #
#                     hy.lst                                                  #
#    Object file   =  C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1 #
#                     \Projects\zstack\ZAP\TVSA\EXP5438\Routinator\Obj\zap_ph #
#                     y.r43                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\student\Documents\GitHub\MHMS\ZAP-MSP430-2.5.1\Projects\zstack\ZAP\Source\zap_phy.c
      1          /**************************************************************************************************
      2              Filename:       zap_phy.c
      3              Revised:        $Date: 2010-12-01 15:31:18 -0800 (Wed, 01 Dec 2010) $
      4              Revision:       $Revision: 24529 $
      5          
      6              Description:
      7          
      8              This file declares the functionality of the ZNP Application Processor Physical Link Layer.
      9          
     10          
     11              Copyright 2009-2010 Texas Instruments Incorporated. All rights reserved.
     12          
     13              IMPORTANT: Your use of this Software is limited to those specific rights
     14              granted under the terms of a software license agreement between the user
     15              who downloaded the software, his/her employer (which must be your employer)
     16              and Texas Instruments Incorporated (the "License").  You may not use this
     17              Software unless you agree to abide by the terms of the License. The License
     18              limits your use, and you acknowledge, that the Software may not be modified,
     19              copied or distributed unless embedded on a Texas Instruments microcontroller
     20              or used solely and exclusively in conjunction with a Texas Instruments radio
     21              frequency transceiver, which is integrated into your product.  Other than for
     22              the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23              works of, modify, distribute, perform, display or sell this Software and/or
     24              its documentation for any purpose.
     25          
     26              YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27              PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28              INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29              NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30              TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31              NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32              LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33              INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34              OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35              OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36              (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38              Should you have any questions regarding your right to use this Software,
     39              contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          
     47          #include "hal_board.h"

   \                                 In  segment DATA16_AN, at 0x200
   \   union <unnamed> _A_PAIN_L
   \                     _A_PAIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x204
   \   union <unnamed> _A_PADIR_L
   \                     _A_PADIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20a
   \   union <unnamed> _A_PASEL_L
   \                     _A_PASEL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x218
   \   union <unnamed> _A_PAIES_L
   \                     _A_PAIES_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x262
   \   union <unnamed> _A_PDOUT_L
   \                     _A_PDOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x264
   \   union <unnamed> _A_PDDIR_L
   \                     _A_PDDIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x266
   \   union <unnamed> _A_PDREN_L
   \                     _A_PDREN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x26a
   \   union <unnamed> _A_PDSEL_L
   \                     _A_PDSEL_L:
   \   000000                DS8 2
     48          #include "zap_phy.h"
     49          
     50          /* ------------------------------------------------------------------------------------------------
     51           *                                          Constants
     52           * ------------------------------------------------------------------------------------------------
     53           */
     54          
     55          #if !defined SB_FORCE_BOOT
     56          #define SB_FORCE_BOOT               0xF8
     57          #define SB_FORCE_RUN               (SB_FORCE_BOOT ^ 0xFF)
     58          #endif
     59          
     60          /* ------------------------------------------------------------------------------------------------
     61           *                                           Local Functions
     62           * ------------------------------------------------------------------------------------------------
     63           */
     64          
     65          #if ZAP_PHY_SPI
     66          #include "zap_phy_spi.c"

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   static uint16 zapPhySpiDly
   \                     zapPhySpiDly:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2
   \                     ?Subroutine6:
   \   000000   F2D040000202 BIS.B   #0x40, &0x202
   \   000006   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine8:
   \   000000   F2B010000002 BIT.B   #0x10, &0x200
   \   000006   1001         RETA

   \                                 In  segment CODE, align 2
   \   __cc_version2 void zapPhySpiPoll(uint8)
   \                     zapPhySpiPoll:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   2182         SUB.W   #0x4, SP
   \   000004   4A4C         MOV.B   R12, R10
   \   000006   ........     CALLA   #?Subroutine8
   \                     ??CrossCallReturnLabel_19:
   \   00000A   432C         JC      ??zapPhySpiPoll_0
   \   00000C   F2C040000202 BIC.B   #0x40, &0x202
   \   000012   0B41         MOV.W   SP, R11
   \   000014   0B53         ADD.W   #0x0, R11
   \   000016   ........     CALLA   #?Subroutine2
   \                     ??CrossCallReturnLabel_22:
   \   00001A   4C4A         MOV.B   R10, R12
   \   00001C   ........     CALLA   #getSRDY2
   \   000020   4C93         CMP.B   #0x0, R12
   \   000022   3524         JEQ     ??zapPhySpiPoll_1
   \   000024   ........     CALLA   #?Subroutine2
   \                     ??CrossCallReturnLabel_23:
   \   000028   5E410100     MOV.B   0x1(SP), R14
   \   00002C   7EF0E000     AND.B   #0xe0, R14
   \   000030   7E904000     CMP.B   #0x40, R14
   \   000034   2C20         JNE     ??zapPhySpiPoll_1
   \   000036   6C41         MOV.B   @SP, R12
   \   000038   3C500700     ADD.W   #0x7, R12
   \   00003C   ........     CALLA   #osal_msg_allocate
   \   000040   084C         MOV.W   R12, R8
   \   000042   0C93         CMP.W   #0x0, R12
   \   000044   2024         JEQ     ??zapPhySpiPoll_2
   \   000046   DC430000     MOV.B   #0x1, 0(R12)
   \   00004A   CC4A0100     MOV.B   R10, 0x1(R12)
   \   00004E   0F4C         MOV.W   R12, R15
   \   000050   2F52         ADD.W   #0x4, R15
   \   000052   8C4F0200     MOV.W   R15, 0x2(R12)
   \   000056   3E400300     MOV.W   #0x3, R14
   \   00005A   0D4B         MOV.W   R11, R13
   \   00005C   0C4F         MOV.W   R15, R12
   \   00005E   ........     CALLA   #osal_memcpy
   \   000062   C1930000     CMP.B   #0x0, 0(SP)
   \   000066   0724         JEQ     ??zapPhySpiPoll_3
   \   000068   6E41         MOV.B   @SP, R14
   \   00006A   1D480200     MOV.W   0x2(R8), R13
   \   00006E   3D500300     ADD.W   #0x3, R13
   \   000072   ........     CALLA   #??Subroutine9_0
   \                     ??zapPhySpiPoll_3:
   \   000076   ........     CALLA   #?Subroutine6
   \                     ??CrossCallReturnLabel_14:
   \   00007A   0D48         MOV.W   R8, R13
   \   00007C   5C42....     MOV.B   &zapTaskId, R12
   \   000080   ........     CALLA   #osal_msg_send
   \   000084   043C         JMP     ??zapPhySpiPoll_1
   \                     ??zapPhySpiPoll_2:
   \   000086   6D41         MOV.B   @SP, R13
   \   000088   4C4A         MOV.B   R10, R12
   \   00008A   ........     CALLA   #HalSpiFlush
   \                     ??zapPhySpiPoll_1:
   \   00008E   ........     CALLA   #?Subroutine6
   \                     ??zapPhySpiPoll_0:
   \   000092   2152         ADD.W   #0x4, SP
   \   000094   3817         POPM.W  #0x4, R11
   \   000096   1001         RETA
   \   000098                REQUIRE _A_PAIN_L
   \   000098                REQUIRE _A_PAOUT_L

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   000000   3E400300     MOV.W   #0x3, R14
   \   000004   4D43         MOV.B   #0x0, R13
   \   000006   0C4B         MOV.W   R11, R12
   \   000008   ........     CALLA   #osal_memset
   \   00000C   7E400300     MOV.B   #0x3, R14
   \   000010                REQUIRE ?Subroutine9
   \   000010                // Fall through to label ?Subroutine9

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   000000   0D4B         MOV.W   R11, R13
   \   000002                REQUIRE ??Subroutine9_0
   \   000002                // Fall through to label ??Subroutine9_0

   \                                 In  segment CODE, align 2
   \                     ??Subroutine9_0:
   \   000000   4C4A         MOV.B   R10, R12
   \   000002   ........     BRA     #HalSpiWrite

   \                                 In  segment CODE, align 2
   \   static __cc_version2 void zapPhySpiInit(void)
   \                     zapPhySpiInit:
   \   000000   F2C040000A02 BIC.B   #0x40, &0x20a
   \   000006   ........     CALLA   #?Subroutine6
   \                     ??CrossCallReturnLabel_11:
   \   00000A   ........     CALLA   #?Subroutine6
   \                     ??CrossCallReturnLabel_12:
   \   00000E   F2D040000402 BIS.B   #0x40, &0x204
   \   000014   F2C010000A02 BIC.B   #0x10, &0x20a
   \   00001A   F2C010000402 BIC.B   #0x10, &0x204
   \   000020   ........     CALLA   #?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   000024   B240D007.... MOV.W   #0x7d0, &zapPhySpiDly
   \   00002A   1001         RETA
   \   00002C                REQUIRE _A_PASEL_L
   \   00002C                REQUIRE _A_PAOUT_L
   \   00002C                REQUIRE _A_PADIR_L
   \   00002C                REQUIRE _A_PAIE_L
   \   00002C                REQUIRE _A_PAIES_L

   \                                 In  segment CODE, align 2
   \                     ?Subroutine3:
   \   000000   F2C010001A02 BIC.B   #0x10, &0x21a
   \   000006   F2D010001802 BIS.B   #0x10, &0x218
   \   00000C   F2D010001A02 BIS.B   #0x10, &0x21a
   \   000012   1001         RETA

   \                                 In  segment CODE, align 2
   \   static __cc_version2 uint8 zapPhySpiSend(uint8, unsigned char *)
   \                     zapPhySpiSend:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   4A4C         MOV.B   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   3B50FDFF     ADD.W   #0xfffd, R11
   \   00000A   5E4B0100     MOV.B   0x1(R11), R14
   \   00000E   7EF0E000     AND.B   #0xe0, R14
   \   000012   7E902000     CMP.B   #0x20, R14
   \   000016   0E20         JNE     ??zapPhySpiSend_0
   \   000018   0D4B         MOV.W   R11, R13
   \   00001A   ........     CALLA   #spiSREQ
   \   00001E   4A4C         MOV.B   R12, R10
   \   000020   5C93         CMP.B   #0x1, R12
   \   000022   0F20         JNE     ??zapPhySpiSend_1
   \   000024   DB430000     MOV.B   #0x1, 0(R11)
   \   000028   FBD060000100 BIS.B   #0x60, 0x1(R11)
   \   00002E   DB430300     MOV.B   #0x1, 0x3(R11)
   \   000032   073C         JMP     ??zapPhySpiSend_1
   \                     ??zapPhySpiSend_0:
   \   000034   ........     CALLA   #?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   000038   0124         JEQ     ??zapPhySpiSend_2
   \   00003A   4843         MOV.B   #0x0, R8
   \                     ??zapPhySpiSend_2:
   \   00003C   ........     CALLA   #?Subroutine6
   \                     ??CrossCallReturnLabel_10:
   \   000040   4A48         MOV.B   R8, R10
   \                     ??zapPhySpiSend_1:
   \   000042   4C4A         MOV.B   R10, R12
   \   000044   3817         POPM.W  #0x4, R11
   \   000046   1001         RETA
   \   000048                REQUIRE _A_PAOUT_L

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   ........     CALLA   #?Subroutine7
   \                     ??CrossCallReturnLabel_15:
   \   000004   023C         JMP     ??getSRDY1_2
   \                     ??getSRDY1_0:
   \   000006   32D05800     BIS.W   #0x58, SR
   \                     ??getSRDY1_2:
   \   00000A   ........     CALLA   #?Subroutine8
   \                     ??CrossCallReturnLabel_20:
   \   00000E   0428         JNC     ??getSRDY1_3
   \   000010   ........     CALLA   #HalBoardDelayed
   \   000014   4C93         CMP.B   #0x0, R12
   \   000016   F723         JNE     ??getSRDY1_0
   \                     ??getSRDY1_3:
   \   000018                REQUIRE ?Subroutine8
   \   000018                // Fall through to label ?Subroutine8

   \                                 In  segment CODE, align 2
   \   static __cc_version2 void zapPhySpiRun(uint8)
   \                     zapPhySpiRun:
   \   000000   0A12         PUSH.W  R10
   \   000002   2183         SUB.W   #0x2, SP
   \   000004   4A4C         MOV.B   R12, R10
   \   000006   ........     CALLA   #?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000A   102C         JC      ??zapPhySpiRun_3
   \   00000C   F14007000000 MOV.B   #0x7, 0(SP)
   \   000012   F2C040000202 BIC.B   #0x40, &0x202
   \   000018   5E43         MOV.B   #0x1, R14
   \   00001A   0D41         MOV.W   SP, R13
   \   00001C   0D53         ADD.W   #0x0, R13
   \   00001E   ........     CALLA   #??Subroutine9_0
   \                     ??CrossCallReturnLabel_21:
   \   000022   ........     CALLA   #?Subroutine6
   \                     ??CrossCallReturnLabel_13:
   \   000026   4C4A         MOV.B   R10, R12
   \   000028   ........     CALLA   #getSRDY2
   \                     ??zapPhySpiRun_3:
   \   00002C   2153         ADD.W   #0x2, SP
   \   00002E   3A41         POP.W   R10
   \   000030   1001         RETA
   \   000032                REQUIRE _A_PAIN_L
   \   000032                REQUIRE _A_PAOUT_L

   \                                 In  segment CODE, align 2
   \                     ?Subroutine7:
   \   000000   4D43         MOV.B   #0x0, R13
   \   000002   1C42....     MOV.W   &zapPhySpiDly, R12
   \   000006   ........     BRA     #HalBoardDelay

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   000000   0D4B         MOV.W   R11, R13
   \   000002   ........     BRA     #??Subroutine9_0

   \                                 In  segment CODE, align 2
   \   static __cc_version2 uint8 spiSREQ(uint8, unsigned char *)
   \                     spiSREQ:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   4A4C         MOV.B   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   ........     CALLA   #?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   00000A   1224         JEQ     ??spiSREQ_0
   \   00000C   CB430000     MOV.B   #0x0, 0(R11)
   \   000010   CB430100     MOV.B   #0x0, 0x1(R11)
   \   000014   CB430200     MOV.B   #0x0, 0x2(R11)
   \   000018   7E400300     MOV.B   #0x3, R14
   \   00001C   ........     CALLA   #?Subroutine4
   \                     ??CrossCallReturnLabel_6:
   \   000020   6E4B         MOV.B   @R11, R14
   \   000022   4E93         CMP.B   #0x0, R14
   \   000024   0424         JEQ     ??spiSREQ_1
   \   000026   3B500300     ADD.W   #0x3, R11
   \   00002A   ........     CALLA   #?Subroutine4
   \                     ??spiSREQ_1:
   \   00002E   4843         MOV.B   #0x0, R8
   \                     ??spiSREQ_0:
   \   000030   ........     CALLA   #?Subroutine6
   \                     ??CrossCallReturnLabel_9:
   \   000034   4C48         MOV.B   R8, R12
   \   000036   3817         POPM.W  #0x4, R11
   \   000038   1001         RETA
   \   00003A                REQUIRE _A_PAOUT_L

   \                                 In  segment CODE, align 2
   \                     ?Subroutine1:
   \   000000   5843         MOV.B   #0x1, R8
   \   000002   ........     CALLA   #getSRDY1
   \   000006   6E4B         MOV.B   @R11, R14
   \   000008   7E500300     ADD.B   #0x3, R14
   \   00000C   ........     CALLA   #?Subroutine9
   \                     ??CrossCallReturnLabel_24:
   \   000010   4C4A         MOV.B   R10, R12
   \   000012   ........     CALLA   #getSRDY2
   \   000016   4C93         CMP.B   #0x0, R12
   \   000018   1001         RETA

   \                                 In  segment CODE, align 2
   \   static __cc_version2 void getSRDY1(uint8)
   \                     getSRDY1:
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4C         MOV.B   R12, R10
   \                     ??getSRDY1_1:
   \   000004   F2C040000202 BIC.B   #0x40, &0x202
   \   00000A   ........     CALLA   #?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000E   0328         JNC     ??getSRDY1_4
   \   000010   4C4A         MOV.B   R10, R12
   \   000012   ........     CALLA   #zapPhyReset
   \                     ??getSRDY1_4:
   \   000016   ........     CALLA   #?Subroutine8
   \                     ??CrossCallReturnLabel_18:
   \   00001A   F42F         JC      ??getSRDY1_1
   \   00001C   3A41         POP.W   R10
   \   00001E   1001         RETA
   \   000020                REQUIRE _A_PAOUT_L
   \   000020                REQUIRE _A_PAIN_L

   \                                 In  segment CODE, align 2
   \   static __cc_version2 uint8 getSRDY2(uint8)
   \                     getSRDY2:
   \   000000   0A12         PUSH.W  R10
   \   000002   F2C010001A02 BIC.B   #0x10, &0x21a
   \   000008   F2C010001802 BIC.B   #0x10, &0x218
   \   00000E   F2D010001A02 BIS.B   #0x10, &0x21a
   \   000014   ........     CALLA   #?Subroutine7
   \                     ??CrossCallReturnLabel_16:
   \   000018   023C         JMP     ??getSRDY2_1
   \                     ??getSRDY2_0:
   \   00001A   32D05800     BIS.W   #0x58, SR
   \                     ??getSRDY2_1:
   \   00001E   ........     CALLA   #?Subroutine8
   \                     ??CrossCallReturnLabel_17:
   \   000022   4A7A         SUBC.B  R10, R10
   \   000024   5A53         ADD.B   #0x1, R10
   \   000026   5AB3         BIT.B   #0x1, R10
   \   000028   042C         JC      ??getSRDY2_2
   \   00002A   ........     CALLA   #HalBoardDelayed
   \   00002E   4C93         CMP.B   #0x0, R12
   \   000030   F423         JNE     ??getSRDY2_0
   \                     ??getSRDY2_2:
   \   000032   ........     CALLA   #?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   000036   4C4A         MOV.B   R10, R12
   \   000038   3A41         POP.W   R10
   \   00003A   1001         RETA
   \   00003C                REQUIRE _A_PAIE_L
   \   00003C                REQUIRE _A_PAIES_L
   \   00003C                REQUIRE _A_PAIN_L
     67          #elif ZAP_PHY_UART
     68          #include "zap_phy_uart.c"
     69          #else
     70          #error Must define a valid PHY for the ZAP
     71          #endif
     72          
     73          static void zapPhyRun(uint8 port);
     74          
     75          /**************************************************************************************************
     76           * @fn          zapPhyInit
     77           *
     78           * @brief       This function initializes the ZAP physical link(s).
     79           *
     80           * input parameters
     81           *
     82           * None.
     83           *
     84           * output parameters
     85           *
     86           * None.
     87           *
     88           * @return      None.
     89           **************************************************************************************************
     90           */

   \                                 In  segment CODE, align 2
     91          void zapPhyInit(void)
   \                     zapPhyInit:
     92          {
     93            HAL_ZNP_RST_CFG();
   \   000000   E2C20202     BIC.B   #0x4, &0x202
   \   000004   E2D20402     BIS.B   #0x4, &0x204
     94            HAL_ZNP_CFG0_HI();
     95          
     96          #if ZAP_PHY_SPI
     97            HAL_ZNP_CFG1_HI();
   \   000008   E2C26B02     BIC.B   #0x4, &0x26b
   \   00000C   E2D26302     BIS.B   #0x4, &0x263
   \   000010   E2D26702     BIS.B   #0x4, &0x267
   \   000014   E2C26502     BIC.B   #0x4, &0x265
     98            zapPhySpiInit();
   \   000018   ........     CALLA   #zapPhySpiInit
     99          #endif
    100          #if ZAP_PHY_UART
    101            HAL_ZNP_CFG1_LO();
    102            zapPhyUartInit();
    103          #endif
    104          
    105            MicroWait(100);
   \   00001C   ........     CALLA   #?Subroutine5
    106            HAL_ZNP_RUN();
    107            zapPhyRun(zapAppPort);
   \                     ??CrossCallReturnLabel_8:
   \   000020   5C42....     MOV.B   &zapAppPort, R12
   \   000024   ........     BRA     #zapPhySpiRun
   \   000028                REQUIRE _A_PAOUT_L
   \   000028                REQUIRE _A_PADIR_L
   \   000028                REQUIRE _A_PDSEL_L
   \   000028                REQUIRE _A_PDOUT_L
   \   000028                REQUIRE _A_PDREN_L
   \   000028                REQUIRE _A_PDDIR_L
    108          }

   \                                 In  segment CODE, align 2
   \                     ?Subroutine5:
   \   000000   3C406400     MOV.W   #0x64, R12
   \   000004   ........     CALLA   #Onboard_wait
   \   000008   E2D20202     BIS.B   #0x4, &0x202
   \   00000C   1001         RETA
    109          
    110          /**************************************************************************************************
    111           * @fn          zapPhyExec
    112           *
    113           * @brief       This function polls the ZAP physical link(s).
    114           *
    115           * input parameters
    116           *
    117           * None.
    118           *
    119           * output parameters
    120           *
    121           * None.
    122           *
    123           * @return      None.
    124           **************************************************************************************************
    125           */

   \                                 In  segment CODE, align 2
    126          void zapPhyExec(uint16 evts)
   \                     zapPhyExec:
    127          {
    128          #if ZAP_PHY_SPI
    129            if (evts & ZAP_PHY_SPI_EVT)
    130            {
    131              zapPhySpiExec();
    132            }
    133          #endif
    134          #if ZAP_PHY_UART
    135            if (evts & ZAP_PHY_UART_EVT)
    136            {
    137              zapPhyUartExec();
    138            }
    139          #endif
    140          }
   \   000000   1001         RETA
    141          
    142          /**************************************************************************************************
    143           * @fn          zapPhyReset
    144           *
    145           * @brief       This function resets the ZNP slave.
    146           *
    147           * input parameters
    148           *
    149           * @param       port - Port Id corresponding to the ZNP to reset.
    150           *
    151           * output parameters
    152           *
    153           * None.
    154           *
    155           * @return      None.
    156           **************************************************************************************************
    157           */

   \                                 In  segment CODE, align 2
    158          void zapPhyReset(uint8 port)
   \                     zapPhyReset:
    159          {
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4C         MOV.B   R12, R10
    160            /* TODO - perhaps remove the 2 NOP's immediately before a final production release of a product.
    161             * This is the crucial place to always have a debugger break-point to catch any newly added
    162             * SREQ's that require more than the default wait time for the SRSP from the ZNP.
    163             * Stop and examine the call stack here to see what went wrong. Note that if the ZNP is built
    164             * with ZNP_RUN_WDOG=TRUE, it will be continually resetting and therefore toggling SRDY while the
    165             * ZAP is stopped here or at any break-point.
    166             */
    167            asm("NOP");
   \   000004   0343         NOP
    168            HAL_ZNP_RST();
   \   000006   E2C20202     BIC.B   #0x4, &0x202
    169            MicroWait(100);
   \   00000A   ........     CALLA   #?Subroutine5
    170            HAL_ZNP_RUN();
    171            zapLostSync(port);
   \                     ??CrossCallReturnLabel_7:
   \   00000E   4C4A         MOV.B   R10, R12
   \   000010   ........     CALLA   #zapLostSync
    172            zapPhyRun(zapAppPort);
   \   000014   5C42....     MOV.B   &zapAppPort, R12
   \   000018   ........     CALLA   #zapPhySpiRun
    173            asm("NOP");
   \   00001C   0343         NOP
    174          }
   \   00001E   3A41         POP.W   R10
   \   000020   1001         RETA
   \   000022                REQUIRE _A_PAOUT_L
    175          
    176          /**************************************************************************************************
    177           * @fn          zapPhySend
    178           *
    179           * @brief       This function sends an RPC message buffer created with zap_msg_allocate().
    180           *
    181           * input parameters
    182           *
    183           * @param       port - Port Id corresponding to the ZNP to which to send the message.
    184           * @param       pBuf - A the buffer pointer returned by zap_msg_allocate().
    185           *
    186           * output parameters
    187           *
    188           * None.
    189           *
    190           * @return      SUCCESS or FAILURE.
    191           **************************************************************************************************
    192           */

   \                                 In  segment CODE, align 2
    193          uint8 zapPhySend(uint8 port, uint8 *pBuf)
   \                     zapPhySend:
    194          {
    195          #if ZAP_PHY_SPI
    196            return zapPhySpiSend(port, pBuf);
   \   000000   ........     BRA     #zapPhySpiSend
    197          #endif
    198          #if ZAP_PHY_UART
    199            return zapPhyUartSend(port, pBuf);
    200          #endif
    201          }
    202          
    203          /**************************************************************************************************
    204           * @fn          zapPhySync
    205           *
    206           * @brief       This function sets sync TRUE for the ZNP specified.
    207           *
    208           * input parameters
    209           *
    210           * @param       port - Port Id corresponding to the ZNP that is in sync.
    211           *
    212           * output parameters
    213           *
    214           * None.
    215           *
    216           * @return      None.
    217           **************************************************************************************************
    218           */

   \                                 In  segment CODE, align 2
    219          void zapPhySync(uint8 port)
   \                     zapPhySync:
    220          {
    221          #if ZAP_PHY_SPI
    222            zapPhySpiSync(port);
    223          #endif
    224          #if ZAP_PHY_UART
    225            zapPhyUartSync(port);
    226          #endif
    227          }
   \   000000   1001         RETA
    228          
    229          /**************************************************************************************************
    230           * @fn          zapPhyWait
    231           *
    232           * @brief       This function sets the SRSP wait timeout as specified by the parameter or to the
    233           *              specific medium's default value if the parameter is zero.
    234           *
    235           * input parameters
    236           *
    237           * @param       wait - the maximum wait delay for an SRSP.
    238           * @param       port - Port Id corresponding to the ZNP wait.
    239           *
    240           * output parameters
    241           *
    242           * None.
    243           *
    244           * @return      None.
    245           **************************************************************************************************
    246           */

   \                                 In  segment CODE, align 2
    247          void zapPhyWait(uint8 port, uint16 wait)
   \                     zapPhyWait:
    248          {
    249          #if ZAP_PHY_SPI
    250            zapPhySpiWait(port, wait);
   \   000000   0D93         CMP.W   #0x0, R13
   \   000002   0220         JNE     ??zapPhyWait_1
   \   000004   3D40D007     MOV.W   #0x7d0, R13
   \                     ??zapPhyWait_1:
   \   000008   824D....     MOV.W   R13, &zapPhySpiDly
    251          #endif
    252          #if ZAP_PHY_UART
    253            zapPhyUartWait(port, wait);
    254          #endif
    255          }
   \   00000C   1001         RETA
    256          
    257          /**************************************************************************************************
    258           * @fn          zapPhyRun
    259           *
    260           * @brief       This function starts the ZNP slave transport running.
    261           *
    262           * input parameters
    263           *
    264           * @param       port - Port Id corresponding to the ZNP to Run.
    265           *
    266           * output parameters
    267           *
    268           * None.
    269           *
    270           * @return      None.
    271           **************************************************************************************************
    272           */
    273          static void zapPhyRun(uint8 port)
    274          {
    275          #if ZAP_PHY_SPI
    276            zapPhySpiRun(zapAppPort);
    277          #endif
    278          #if ZAP_PHY_UART
    279            zapPhyUartRun(zapAppPort);
    280          #endif
    281          }
    282          
    283          /**************************************************************************************************
    284          */

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
       6  getSRDY1
             6 -> HalBoardDelay
             6 -> HalBoardDelayed
             6 -> zapPhyReset
       6  getSRDY2
             6 -> HalBoardDelay
             6 -> HalBoardDelayed
      12  spiSREQ
            12 -> HalSpiWrite
            12 -> getSRDY1
            12 -> getSRDY2
       4  zapPhyExec
       4  zapPhyInit
             4 -> Onboard_wait
             4 -> zapPhySpiInit
             4 -> zapPhySpiRun
       6  zapPhyReset
             6 -> Onboard_wait
             6 -> zapLostSync
             6 -> zapPhySpiRun
       4  zapPhySend
             4 -> zapPhySpiSend
       4  zapPhySpiInit
      16  zapPhySpiPoll
            16 -> HalSpiFlush
            16 -> HalSpiWrite
            16 -> getSRDY2
            16 -> osal_memcpy
            16 -> osal_memset
            16 -> osal_msg_allocate
            16 -> osal_msg_send
       8  zapPhySpiRun
             8 -> HalBoardDelay
             8 -> HalBoardDelayed
             8 -> HalSpiWrite
             8 -> getSRDY2
      12  zapPhySpiSend
            12 -> HalSpiWrite
            12 -> getSRDY1
            12 -> getSRDY2
            12 -> spiSREQ
       4  zapPhySync
       4  zapPhyWait


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine9_0
      24  ?Subroutine0
      26  ?Subroutine1
      16  ?Subroutine2
      20  ?Subroutine3
       6  ?Subroutine4
      14  ?Subroutine5
       8  ?Subroutine6
      10  ?Subroutine7
       8  ?Subroutine8
       2  ?Subroutine9
       2  _A_PADIR_L
       2  _A_PAIES_L
       2  _A_PAIE_L
       2  _A_PAIN_L
       2  _A_PAOUT_L
       2  _A_PASEL_L
       2  _A_PDDIR_L
       2  _A_PDOUT_L
       2  _A_PDREN_L
       2  _A_PDSEL_L
      32  getSRDY1
      60  getSRDY2
      58  spiSREQ
       2  zapPhyExec
      40  zapPhyInit
      34  zapPhyReset
       4  zapPhySend
       2  zapPhySpiDly
      44  zapPhySpiInit
     152  zapPhySpiPoll
      50  zapPhySpiRun
      72  zapPhySpiSend
       2  zapPhySync
      14  zapPhyWait

 
 704 bytes in segment CODE
  20 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
 
 704 bytes of CODE memory
   2 bytes of DATA memory (+ 20 bytes shared)

Errors: none
Warnings: none
